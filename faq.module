<?php
// $Id$

/**
 * @file
 * The FAQ module allows users to create a FAQ page, with questions and answers
 * displayed in different styles, according to the settings.
 */

/**
 * Implementation of hook_help().
 */
function faq_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#faq":
      $output .= '<p>'. t("This module allows users with the 'administer faq' permission to create question and answer pairs which will be displayed on the 'faq' page.  The 'faq' page is automatically generated from the FAQ nodes configured and the layout of this page can be modified on the settings page.  Users will need the 'view faq' permission in order to view the 'faq' page.") .'</p>'.
        '<p>'. t("To create a question and answer, the user must create a 'FAQ' node (Create content >> FAQ).  This screen allows the user to edit the question and answer text.  If the 'Taxonomy' module is enabled and there are some terms configured for the FAQ node type, it will also be possible to put the questions into different categories when editing.") .'</p>'.
        '<p>'. t("The 'Frequently Asked Questions' settings configuration screen will allow users with 'administer faq' permissions to specify different layouts of the questions and answers.") .'</p>'.
        '<p>'. t("All users with 'view faq' permissions will be able to view the generated FAQ page at 'www.example.com/faq'.") .'</p>';
      return $output;
    case "admin/modules#description":
      return t("Allows the user to configure the layout of questions and answers on a FAQ page.");
    case "node/add/faq":
      return t("Add a question and answer to a FAQ list.");
  }

}

/**
 * Implementation of hook_perm().
 */
function faq_perm() {
  return array('administer faq', 'view faq', 'edit own faq', 'edit faq', 'create faq');
}


/**
 * Implementation of hook_access().
 */
function faq_access($op, $node, $account) {
  global $user;

  if ($op == 'create') {
    if (user_access('create faq') || user_access('administer faq')) {
      return TRUE;
    }
  }
  else if ($op == 'update' || $op == 'delete') {
    if (user_access('edit faq') || user_access('administer faq')) {
      return TRUE;
    }
    else if (user_access('edit own faq') && $user->uid == $node->uid) {
      return TRUE;
    }
  }
  else if ($op == 'view') {
    return user_access('view faq');
  }
}

/**
 * Implementation of hook_menu().
 */
function faq_menu() {
  $items = array();

  $items['faq'] = array(
    'title' => variable_get('faq_title', 'Frequently Asked Questions'),
    'page callback' => 'faq_page',
    'access callback' => 'user_access',
    'access arguments' => array('view faq'),
    'weight' => 1
  );
  $items['faq/%'] = array(
    'title' => variable_get('faq_title', 'Frequently Asked Questions'),
    'page callback' => 'faq_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view faq'),
  );

  $items['admin/settings/faq'] = array(
    'title' => 'Frequently Asked Questions',
    'description' => 'Allows the user to configure the layout of questions and answers on a FAQ page.',
    'page callback' => 'faq_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
  );
  $items['admin/settings/faq/general'] = array(
    'title' => 'General',
    'description' => 'Allows the user to configure the header and descriptive text for the FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_general_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/faq/questions'] = array(
    'title' => 'Questions',
    'description' => 'Allows the user to configure the layout of questions and answers on a FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_questions_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['admin/settings/faq/categories'] = array(
    'title' => 'Categories',
    'description' => 'Allows the user to configure the layout of questions and answers using categories on a FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_categories_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  $items['admin/settings/faq/weight'] = array(
    'title' => 'Weight',
    'description' => 'Allows the user to configure the order of questions and answers on a FAQ page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_weight_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  return $items;
}

/**
 * Implementation of hook_node_info().
 *
 * Defines the FAQ node/content type.
 * @return
 *   An array, containing the title, module name and the description.
 */
function faq_node_info() {
  return array(
    'faq' => array(
      'name' => t('FAQ'),
      'module' => 'faq',
      'description' => t('A frequently asked question and its answer.'),
      'title_label' => t('Question'),
      'body_label' => t('Answer'),
    )
  );
}

/**
 * Implementation of hook_node_name().
 */
function faq_node_name($node) {
  return t('FAQ');
}

/**
 * Defines the form where new questions and answers are written.
 *
 * @param &$node
 *   The node being added or edited.
 * @param &$param
 *   The hook can set this variable to an associative array of attributes to add
 *   to the enclosing \<form\> tag.
 * @return
 *   The form elements in the $form array.
 */
function faq_form(&$node, &$param) {
  $type = node_get_types('type', $node);

  // Question.
  $form['title'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->title_label),
    '#default_value' => $node->title,
    '#required' => TRUE,
    '#weight' => 0,
    '#rows' => 3,
    '#description' => t('Question to be answered'),
  );

  // Answer.
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  $form['body_field']['body']['#description'] = t('This is that answer to the question.  It will be filtered according to the input format.');

  return $form;
}


/**
 * Inserts the faq node question text into the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_insert($node) {
  $ret = db_query("INSERT INTO {faq_questions} (nid, vid, question) VALUES(%d, %d, '%s')", $node->nid, $node->vid, $node->title);
}

/**
 * Updates the faq node question text in the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_update($node) {
  if ($node->revision) {
    faq_insert($node);
  }
  else {
    db_query("UPDATE {faq_questions} SET question = '%s' WHERE nid = %d AND vid = %d", $node->title, $node->nid, $node->vid);
  }
}

/**
 * Deletes an FAQ node from the database.
 *
 * @param &$node
 *   Which node to delete.
 */
function faq_delete(&$node) {
  db_query("DELETE FROM {faq_weights} WHERE nid = '%d'", $node->nid);
  db_query("DELETE FROM {faq_questions} WHERE nid = '%d'", $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Initialises $node->question using the value in the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_load($node) {
  $result = db_fetch_object(db_query('SELECT question FROM {faq_questions} WHERE nid = %d AND vid = %d', $node->nid, $node->vid));
  $node->question = $result->question;
  $node->title = $node->question;

  return $node;
}

/**
 * Implementation of hook_nodeapi().
 */
function faq_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {faq_questions} WHERE nid = %d AND vid = %d', $node->nid, $node->vid);
      break;
  }
}


/**
 * Display a FAQ node.
 *
 * @param $node
 *   Which node to show.
 * @param $teaser
 *   Boolean variable, if set TRUE, it will show only a short part of the
 *   content; it should be opposite to $teaser.
 * @param $page
 *   Boolean variable, if set TRUE, it will show the entire answer of the
 *   FAQ entry.
 * @return
 *   The node object.
 */
function faq_view($node, $teaser = FALSE, $page = FALSE) {

  if ($page) {
    $breadcrumb = array();

    if (module_exists("taxonomy") && $node->taxonomy) {
      foreach ($node->taxonomy as $term) {
        $current = $term;
        continue;
      }
      $breadcrumb[] = l($current->name, 'faq/'. $current->tid);
      while ($parents = taxonomy_get_parents($current->tid)) {
        $current = array_shift($parents);
        $breadcrumb[] = l($current->name, 'faq/'. $current->tid);
      }
    }
    $breadcrumb[] = l(t(variable_get('faq_title', 'Frequently Asked Questions')), 'faq');
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb = array_reverse($breadcrumb);
    drupal_set_breadcrumb($breadcrumb);
  }

  $node = node_prepare($node, $teaser);

  return $node;
}

/**
 * Generates the settings form for the FAQ module.
 *
 * @param $op
 *  Default value is NULL; determines what are the permissions of the current
 *  user on the FAQ.
 * @param $aid
 *  Default value is NULL; deprecated variable.
 * @return
 *   The output, which contains the html code for the settings form generated by
 *   drupal_get_form() function.
 */
function faq_settings_page($op = NULL, $aid = NULL) {

  $output = drupal_get_form('faq_general_settings_form');

  return $output;
}

/**
 * Define a form to edit the page header and descriptive text
 *
 * @return
 *   The general settings form code stored in the $form variable, before converted to html.
 */
function faq_general_settings_form() {
  $form['faq_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => variable_get('faq_title', t('Frequently Asked Questions')),
  );

  $form['body_filter']['faq_description'] = array(
    '#type' => 'textarea',
    '#title' => t('FAQ Description'),
    '#default_value' => variable_get('faq_description', ''),
    '#description' => t('Your FAQ description.  This will be placed at the top of the page, above the questions and can serve as an introductory text.'),
    '#rows' => 5,
  );
  $form['body_filter']['faq_description_format'] = filter_form(variable_get('faq_description_format', ''));

  $form['update'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#weight' => 3,
    '#submit' => array('faq_general_settings_form_submit'),
  );

  return $form;
}

/**
 * Define the elements for the FAQ Settings page - Questions tab.
 *
 * @return
 *   The form code inside the $form array.
 */
function faq_questions_settings_form() {

  drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');

  $display_options['questions_inline'] = t('Questions inline');
  $display_options['questions_top'] = t('Clicking on question takes user to answer further down the page');
  $display_options['hide_answer'] = t('Clicking on question opens/hides answer under question');
  $display_options['new_page'] = t('Clicking on question opens the answer in a new page');

  $form['faq_display'] = array(
    '#type' => 'radios',
    '#options' => $display_options,
    '#title' => t('Page layout'),
    '#description' => t('This controls how the questions and answers are displayed on the page and what happens when someone clicks on the question.'),
    '#default_value' => variable_get('faq_display', 'questions_top'),
  );

  $form['faq_questions_misc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Miscellaneous layout settings'),
    '#collapsible' => TRUE,
  );

  $form['faq_questions_misc']['faq_question_listing'] = array(
    '#type' => 'select',
    '#options' => array('ol' => 'Ordered list', 'ul' => 'Unordered list'),
    '#title' => t('Questions listing style'),
    '#description' => t("This allows to select how the questions listing is presented.  It only applies to the layouts: 'Clicking on question takes user to answer further down the page' and 'Clicking on question opens the answer in a new page'.  An ordered listing would number the questions, whereas an unordered list will have a bullet to the left of each question."),
    '#default_value' => variable_get('faq_question_listing', 'ul'),
  );

  $form['faq_questions_misc']['faq_qa_mark'] = array(
    '#type' => 'checkbox',
    '#title' => t('Label questions and answers'),
    '#description' => t('This option is only valid for the "Questions Inline" layout.  It labels all questions on the faq page with the "question label" setting and all answers with the "answer label" setting.  For example these could be set to "Q:" and "A:".'),
    '#default_value' => variable_get('faq_qa_mark', FALSE),
  );

  $form['faq_questions_misc']['faq_question_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Question Label'),
    '#description' => t('The label to pre-pend to the question text in the "Questions Inline" layout if labelling is enabled.'),
    '#default_value' => variable_get('faq_question_label', 'Q:'),
  );

  $form['faq_questions_misc']['faq_answer_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Answer Label'),
    '#description' => t('The label to pre-pend to the answer text in the "Questions Inline" layout if labelling is enabled.'),
    '#default_value' => variable_get('faq_answer_label', 'A:'),
  );

  $form['faq_questions_misc']['faq_use_teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use answer teaser'),
    '#description' => t("This enables the display of the answer teaser text instead of the full answer when using the 'Questions inline' or 'Clicking on question takes user to answer further down the page' display options.  This is useful when you have long descriptive text.  The user can see the full answer by clicking on the question."),
    '#default_value' => variable_get('faq_use_teaser', FALSE),
  );

  $form['faq_questions_misc']['faq_show_node_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show node links'),
    '#description' => t('This enables the display of links under the answer text on the faq page.  Examples of these links include "Read more", "Add comment".'),
    '#default_value' => variable_get('faq_show_node_links', FALSE),
  );

  $form['faq_questions_misc']['faq_back_to_top'] = array(
    '#type' => 'textfield',
    '#title' => t('"Back to Top" link text'),
    '#description' => t('This allows the user to change the text displayed for the links which return the user to the top of the page on certain page layouts.  Defaults to "Back to Top".  Leave blank to have no link.'),
    '#default_value' => variable_get('faq_back_to_top', 'Back to Top'),
  );

  $form['faq_questions_misc']['faq_disable_node_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable question links to nodes'),
    '#description' => t('This allows the user to prevent the questions being links to the faq node in all layouts except "Clicking on question opens the answer in a new page".'),
    '#default_value' => variable_get('faq_disable_node_links', FALSE),
  );

  $form['faq_questions_misc']['faq_default_sorting'] = array(
    '#type' => 'select',
    '#title' => t('Default Sorting for Non-Weighted FAQs'),
    '#options' => array('DESC' => t('Date Descending'), 'ASC' => t('Date Ascending')),
    '#description' => t("This controls the default weighting behaviour for new FAQ nodes which haven't been assigned a weight."),
    '#default_value' => variable_get('faq_default_sorting', 'DESC'),
  );

  return system_settings_form($form);
}

/**
 * Define the elements for the FAQ Settings page - categories tab.
 *
 * @return
 *   The form code inside the $form array.
 */
function faq_categories_settings_form() {
  if (!module_exists("taxonomy")) {
    drupal_set_message(t('Categorization of questions will not work without the "taxonomy" module being enabled.'), 'error');
  }
  drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');

  // Set up a hidden variable.
  $form['faq_display'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('faq_display', 'questions_top'),
  );

  $form['faq_use_categories'] = array(
    '#type' => 'checkbox',
    '#title' => t('Categorize questions'),
    '#description' => t('This allows the user to display the questions according to the categories configured on the add/edit FAQ page.  Use of sub-categories is only recommended for large lists of questions.  The Taxonomy module must be enabled.'),
    '#default_value' => variable_get('faq_use_categories', FALSE),
  );

  $category_options['categories_inline'] = t('Categories inline');
  $category_options['hide_qa'] = t('Clicking on category opens/hides questions and answers under category');
  $category_options['new_page'] = t('Clicking on category opens the questions/answers in a new page');

  $form['faq_category_display'] = array(
    '#type' => 'radios',
    '#options' => $category_options,
    '#title' => t('Categories layout'),
    '#description' => t('This controls how the categories are displayed on the page and what happens when someone clicks on the category.'),
    '#default_value' => variable_get('faq_category_display', 'categories_inline'),
  );

  $form['faq_category_misc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Miscellaneous layout settings'),
    '#collapsible' => TRUE,
  );

  $form['faq_category_misc']['faq_category_listing'] = array(
    '#type' => 'select',
    '#options' => array('ol' => 'Ordered list', 'ul' => 'Unordered list'),
    '#title' => t('Categories listing style'),
    '#description' => t("This allows to select how the categories listing is presented.  It only applies to the 'Clicking on category opens the questions/answers in a new page' layout.  An ordered listing would number the categories, whereas an unordered list will have a bullet to the left of each category."),
    '#default_value' => variable_get('faq_category_listing', 'ul'),
  );

  $form['faq_category_misc']['faq_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show FAQ count'),
    '#description' => t('This displays the number of questions in a category after the category name.'),
    '#default_value' => variable_get('faq_count', FALSE),
  );

  $form['faq_category_misc']['faq_answer_category_name'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display category name for answers'),
    '#description' => t("This allows the user to toggle the visibility of the category name above each answer section for the 'Clicking on question takes user to answer further down the page' question/answer display."),
    '#default_value' => variable_get('faq_answer_category_name', FALSE),
  );

  $form['faq_category_misc']['faq_group_questions_top'] = array(
    '#type' => 'checkbox',
    '#title' => t("Group questions and answers for 'Categories inline'"),
    '#description' => t("This controls how categories are implemented with the 'Clicking on question takes user to answer further down the page' question/answer display."),
    '#default_value' => variable_get('faq_group_questions_top', FALSE),
  );

  $form['faq_category_misc']['faq_hide_child_terms'] = array(
    '#type' => 'checkbox',
    '#title' => t("Only show sub-categories when parent category is selected"),
    '#description' => t("This allows the user more control over how and when sub-categories are displayed.  It does not affect the 'Categories inline' display."),
    '#default_value' => variable_get('faq_hide_child_terms', FALSE),
  );

  $form['faq_category_misc']['faq_show_term_page_children'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show sub-categories on FAQ category pages"),
    '#description' => t("Sub-categories with 'faq' nodes will be displayed on the per category FAQ page.  This will also happen if 'Only show sub-categories when parent category is selected' is set."),
    '#default_value' => variable_get('faq_show_term_page_children', FALSE),
  );

  $form['faq_category_advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced category settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $vocab_options = array();
  $vocabularies = taxonomy_get_vocabularies('faq');
  foreach ($vocabularies as $vid => $vobj) {
    $vocab_options[$vid] = $vobj->name;
  }
  $form['faq_category_advanced']['faq_omit_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Omit vocabulary'),
    '#description' => t("Terms from these vocabularies will be excluded from the FAQ pages."),
    '#default_value' => variable_get('faq_omit_vocabulary', 0),
    '#options' => $vocab_options,
    '#multiple' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Define the elements for the FAQ Settings page - weight tab.
 *
 * @param $form_state
 *   Store the submitted form values.
 * @return
 *   The form code, before being converted to html format.
 */
function faq_weight_settings_form($form_state) {
  $order = $date_order = '';

  drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');
  drupal_add_css(drupal_get_path('module', 'faq') .'/faq.css');

  $use_categories = variable_get('faq_use_categories', FALSE);
  if (!$use_categories) {
    $step = "order";
  }
  elseif (!isset($form_state['values'])) {
    $step = "categories";
  }
  else {
    $step = "order";
  }
  $form['step'] = array(
    '#type' => 'value',
    '#value' => $step,
  );

  // Categorized q/a.
  if ($step == "categories") {

    // Get list of categories.
    $vocabularies = taxonomy_get_vocabularies('faq');
    $options = array();
    foreach ($vocabularies as $vid => $vobj) {
      $tree = taxonomy_get_tree($vid);
      foreach ($tree as $term) {
        if (!taxonomy_term_count_nodes($term->tid, 'faq')) {
          continue;
        }
        $options[$term->tid] = $term->name;
        $form['choose_cat']['faq_category'] = array(
          '#type' => 'select',
          '#title' => t("Choose a category"),
          '#description' => t("Choose a category that you wish to order the questions for."),
          '#options' => $options,
          '#multiple' => FALSE,
        );

        $form['choose_cat']['search'] = array(
          '#type' => 'submit',
          '#value' => t('Search'),
          '#submit' => array('faq_weight_settings_choose_cat_form_submit'),
        );
      }
    }

  }

  else {
    $default_sorting = variable_get('faq_default_sorting', 'DESC');
    $default_weight = 0;
    if ($default_sorting != 'DESC') {
      $default_weight = 1000000;
    }

    $options = array();
    $category = 0;
    if (!empty($form_state['values']['faq_category'])) {
      $category = $form_state['values']['faq_category'];
    }
    if (empty($category)) {
      $category = 0;
      $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON n.nid = w.nid AND w.tid = '%d' WHERE n.type='faq' AND n.status = 1 ORDER BY weight ASC, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $category, $default_sorting);
      $date_result = db_query(db_rewrite_sql("SELECT n.nid, n.title, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON n.nid = w.nid AND w.tid = '%d 'WHERE n.type='faq' AND n.status = 1 ORDER BY n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $category, $default_sorting);
    }
    else {
      $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON n.nid = w.nid AND w.tid = '%d' WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight ASC, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $category, $category, $default_sorting);
      $date_result = db_query(db_rewrite_sql("SELECT n.nid, n.title, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON n.nid = w.nid AND w.tid = '%d' WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $category, $category, $default_sorting);
    }


    while ($node = db_fetch_object($result)) {
      $title = (strlen($node->title) <= 64) ? $node->title : substr_replace($node->title, "...", 63);
      $options[$node->nid] = $title;
      $order .= "$node->nid,";
    }
    $order = rtrim($order, ",");

    while ($node = db_fetch_object($date_result)) {
      $date_options[$node->nid] = $node->title;
      $date_order .= "$node->nid,";
    }
    $date_order = rtrim($date_order, ",");

    $form['weight']['faq_node_order'] = array(
      '#type' => 'hidden',
      '#default_value' => $order,
    );
    $form['weight']['faq_node_date_order'] = array(
      '#type' => 'hidden',
      '#default_value' => $date_order,
    );
    $form['weight']['faq_category'] = array(
      '#type' => 'value',
      '#value' => $category,
    );
    $asc = '<a href="#" onclick="faq_order_by_date(\'ASC\');">ascending</a>';
    $desc = '<a href="#" onclick="faq_order_by_date(\'DESC\');">descending</a>';

    $form['weight']['order_no_cats'] = array(
      '#type' => 'select',
      '#title' => t("Question Order"),
      '#description' => t("This determines the order of the questions and answers on the FAQ page.  Just select one or more questions and use the arrows to change their position in the list.  You can also order the list by the question creation date !desc or !asc.", array('!desc' => $desc, '!asc' => $asc)),
      '#options' => $options,
      '#multiple' => TRUE,
      '#size' => min(20, count($options)),
    );

    $form['weight']['move_up'] = array(
      '#type' => 'markup',
      '#value' => '<input type="button" onclick="faq_move_selected_item_up();"
      value="&uarr;" class="faq_arrow"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
    );

    $form['weight']['move_down'] = array(
      '#type' => 'markup',
      '#value' => '<input type="button" onclick="faq_move_selected_item_down();"
      value="&darr;" class="faq_arrow"/><br />',
    );

    $form['update']['attach'] = array(
      '#type' => 'submit',
      '#value' => t('Save order'),
      '#weight' => 3,
      '#attributes' => array('onclick' => 'faq_update_order();'),
      '#submit' => array('faq_weight_settings_reorder_form_submit'),
    );
  }


  return $form;
}

/**
 * Function saves the options set by the user in the FAQ Settings - General tab.
 *
 * @param $form
 *   Array, containing the form structure.
 * @param &$form_state
 *   This variable is passed by reference along through each stage of form
 *   processing. the $form_state['values'] stores the values of the forms, and
 *   replaces the $form_values in the former versions of Drupal.
 */
function faq_general_settings_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Save configuration')) {

    variable_set('faq_title', $form_state['values']['faq_title']);
    variable_set('faq_description', $form_state['values']['faq_description']);
    variable_set('faq_description_format', $form_state['values']['format']);

    drupal_set_message(t('Configuration has been updated.'));
  }
}


/**
 * Function set the rebuild of the form in the FAQ Settings - Weight tab.
 *
 * @param $form
 *   Array, containing the form structure.
 * @param &$form_state
 *   This variable is passed by reference along through each stage of form
 *   processing.
 *   The 'rebuild' key inside $form_state['rebuild'] structure, overrides the
 *   'redirect' key: when it is set to TRUE, the form will be rebuilt from
 *   scratch and displayed on screen.
 */
function faq_weight_settings_choose_cat_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Save the options set by the user in the FAQ Settings - Weight tab by writing
 * the corresponding sql queries that set the new items order, according to the
 * sql database system used.
 *
 * @param $form
 *   Array, containing the form structure.
 * @param &$form_state
 *   This variable is passed by reference along through each stage of form
 *   processing.
 */
function faq_weight_settings_reorder_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Save order')) {

    $order = explode(",", $form_state['values']['faq_node_order']);
    switch ($GLOBALS['db_type']) {
      case 'mysql':
      case 'mysqli':
        foreach ($order as $index => $nid) {
          $result = db_query("REPLACE INTO {faq_weights} (tid, nid, weight) VALUES('%d', '%d', '%d')", $form_state['values']['faq_category'], $nid, $index);
        }
        break;

      case 'pgsql':
        foreach ($order as $index => $nid) {
          $result = db_query("DELETE FROM {faq_weights} WHERE tid = '%d' AND nid = '%d'", $form_state['values']['faq_category'], $nid);
          $result = db_query("INSERT INTO {faq_weights} (tid, nid, weight) VALUES('%d', '%d', '%d')", $form_state['values']['faq_category'], $nid, $index);
        }
        break;
    }

    drupal_set_message(t('Configuration has been updated.'));
  }
}



/**
 * Function to display the faq page.
 *
 * @param $tid
 *  Default is 0, determines if the questions and answers on the page
 *  will be shown according to a category or non-categorized.
 * @return
 *  The output variable which contains an html formatted page with FAQ
 *  questions and answers.
 */
function faq_page($tid = 0) {
  // Things to provide translations for.
  $default_values = array(t('Frequently Asked Questions'), t('Back to Top'), t('>> more'), t('Q:'), t('A:'));

  $output = $output_answers = '';
  drupal_add_css(drupal_get_path('module', 'faq') .'/faq.css');
  if (arg(0) == 'faq') {
    drupal_set_title(t(variable_get('faq_title', 'Frequently Asked Questions')));
  }
  if (!module_exists("taxonomy")) {
    $tid = 0;
  }

  // Configure the breadcrumb trail.
  $breadcrumb = array();

  if (!empty($tid) && $current = taxonomy_get_term($tid)) {
    $breadcrumb[] = l($current->name, 'faq/'. $current->tid);
    while ($parents = taxonomy_get_parents($current->tid)) {
      $current = array_shift($parents);
      $breadcrumb[] = l($current->name, 'faq/'. $current->tid);
    }
    $breadcrumb[] = l(t(variable_get('faq_title', 'Frequently Asked Questions')), 'faq');
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb = array_reverse($breadcrumb);
    drupal_set_breadcrumb($breadcrumb);
  }


  $faq_display = variable_get('faq_display', 'questions_top');
  $use_categories = variable_get('faq_use_categories', FALSE);
  if (!module_exists("taxonomy")) $use_categories = FALSE;


  // Non-categorized questions and answers.
  if (!$use_categories) {
    $default_sorting = variable_get('faq_default_sorting', 'DESC');
    $default_weight = 0;
    if ($default_sorting != 'DESC') {
      $default_weight = 1000000;
    }
    $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $default_sorting);
    $data = array();
    while ($row = db_fetch_object($result)) {
      $node = node_load($row->nid);
      if (node_access("view", $node)) {
        $data[] = $node;
      }
    }

    switch ($faq_display) {
      case 'questions_top':
        $output = theme('faq_questions_top', $data);
        break;

      case 'hide_answer':
        $output = theme('faq_hide_answer', $data);
        break;

      case 'questions_inline':
        $output = theme('faq_questions_inline', $data);
        break;

      case 'new_page':
        $output = theme('faq_new_page', $data);
        break;

    } // End of switch.
  }


  // Categorize questions.
  else {
    $category_display = variable_get('faq_category_display', 'categories_inline');
    $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
    $output .= "<br />";


    // If we're viewing a specific category/term.
    if (!empty($tid) && $term = taxonomy_get_term($tid)) {
      $title = t(variable_get('faq_title', 'Frequently Asked Questions'));
      if (arg(0) == 'faq' && is_numeric(arg(1))) {
        drupal_set_title($title . ($title ? ' - ' : '') . check_plain($term->name));
      }
      if ($category_display == 'hide_qa') {
        drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');
      }
      _display_faq_by_category($faq_display, $category_display, $term, 0, $output, $output_answers);
      $output = '<div class="content"><div class="faq">'. $output;
      $output .= $output_answers .'</div></div>';
      return $output;
    }


    $list_style = variable_get('faq_category_listing', 'ul');
    $vocabularies = taxonomy_get_vocabularies('faq');
    $vocab_omit = variable_get('faq_omit_vocabulary', array());
    $vocabularies = array_diff_key($vocabularies, $vocab_omit);
    $items = array();
    $vocab_items = array();
    foreach ($vocabularies as $vid => $vobj) {

      if ($category_display == "new_page") {
        $vocab_items = _get_indented_faq_terms($vid, 0);
        $items = array_merge($items, $vocab_items);
      }

      // Not a new page.
      else {
        if ($hide_child_terms && $category_display == 'hide_qa') {
          $tree = taxonomy_get_tree($vid, 0, -1, 1);
        }
        else {
          $tree = taxonomy_get_tree($vid);
        }
        foreach ($tree as $term) {

          switch ($category_display) {

            case 'hide_qa':
              drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');


            case 'categories_inline':
              if (taxonomy_term_count_nodes($term->tid, 'faq')) {
                _display_faq_by_category($faq_display, $category_display, $term, 1, $output, $output_answers);
              }
              break;


          } // End of switch (category_display).
        } // End of foreach term.
      } // End of foreach vocab.
    } // End of if $category_display != new_page.

    if ($category_display == "new_page") {
      $output = theme('item_list', $items, NULL, $list_style);
    }
  }

  $desc = '';
  $faq_description = t(variable_get('faq_description', ''));
  $format = variable_get('faq_description_format', 0);
  if ($format) {
    $faq_description = check_markup($faq_description, $format, FALSE);
  }
  if (!empty($faq_description)) {
    $desc = '<div class="faq_description">'. $faq_description ."</div>\n";
  }
  $output = '<div class="content"><div class="faq">'. $desc . $output;
  $output .= $output_answers ."</div></div>\n";

  return $output;
}

/**
 * Display FAQ questions and answers filtered by category.
 *
 *  @param $faq_display
 *    Define the way the FAQ is being shown; can have the values:
 *    'questions top',hide answers','questions inline','new page'.
 *  @param $category_display
 *    Contain which category layout should be used.
 *  @param $term
 *    Contain the category / term information.
 *  @param $display_header
 *    Set if the header will be shown or not.
 *  @param &$output
 *    Reference which holds the content of the page, html formatted.
 *  @param &$output_answer
 *    Reference which holds the answers from the FAQ, when showing questions
 *    on top.
 */
function _display_faq_by_category($faq_display, $category_display, $term, $display_header, &$output, &$output_answers) {

  $default_sorting = variable_get('faq_default_sorting', 'DESC');
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }

  $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $term->tid, $default_sorting);
  $data = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    if (node_access("view", $node)) {
      $data[] = $node;
    }
  }


  // Handle indenting of categories.
  $depth = 0;
  if (!isset($term->depth)) $term->depth = 0;
  while ($depth < $term->depth) {
    $display_header = 1;
    $indent = '<div class="faq_category_indent">';
    $output .= $indent;
    $depth++;
  }

  // Set up the class name for hiding the q/a for a category if required.
  $faq_class = "faq_qa";
  if ($category_display == "hide_qa") {
    $faq_class = "faq_qa_hide";
  }

  switch ($faq_display) {

    case 'questions_top':
      //TODO fix workaround: have to share result.
      $output .= theme('faq_category_questions_top', $data, $display_header, $category_display, $term, $faq_class);
      $output_answers .= theme('faq_category_questions_top_answers', $data, $display_header, $category_display, $term, $faq_class);
      break;


    case 'hide_answer':
      $output .= theme('faq_category_hide_answer', $data, $display_header, $category_display, $term, $faq_class);
      break;


    case 'questions_inline':
      $output .= theme('faq_category_questions_inline', $data, $display_header, $category_display, $term, $faq_class);
      break;


    case 'new_page':
      $output .= theme('faq_category_new_page', $data, $display_header, $category_display, $term, $faq_class);
      break;

  } // End of switch (faq_display).


  // Handle indenting of categories.
  while ($depth > 0) {
    $output .= '</div>';
    $depth--;
  }

}

/**
 * Implementation of hook_theme().
 *
 * @return
 *   An array, containing the structure of the FAQ page.
 */
function faq_theme() {
  return array(
    'faq_questions_top' => array(
      'template' => 'faq-questions-top',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_questions_top' => array(
      'template' => 'faq-category-questions-top',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL),
      ),
    'faq_category_questions_top_answers' => array(
      'template' => 'faq-category-questions-top-answers',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL),
      ),
    'faq_hide_answer' => array(
      'template' => 'faq-hide-answer',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_hide_answer' => array(
      'template' => 'faq-category-hide-answer',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL),
      ),
    'faq_questions_inline' => array(
      'template' => 'faq-questions-inline',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_questions_inline' => array(
      'template' => 'faq-category-questions-inline',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL),
      ),
    'faq_new_page' => array(
      'template' => 'faq-new-page',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_new_page' => array(
      'template' => 'faq-category-new-page',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL),
      ),
    'faq_highlights' => array(
      'arguments' => array('num' => 5),
      ),
    'faq_random_highlights' => array(
      'arguments' => array('num' => 5),
      ),
  );
}

/**
 * Create the structure of the page, when the questions are to be shown on top.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 * @return
 *   A variable holding the HTML formatted page.
 */
function template_preprocess_faq_questions_top(&$variables) {
  $data = $variables['data'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);

  // Configure "back to top" link.
  $back_to_top = faq_init_back_to_top('faq');

  // Loop through results.
  $questions = array();
  $answers = array();
  $key = 0;
  foreach ($data as $node) {
    $anchor = "n". $node->nid;
    $questions[$key] = l($node->question, 'faq', array('fragment' => $anchor));
    faq_view_question($answers[$key], $node, '', $anchor);
    faq_view_answer($answers[$key], $node, $back_to_top, $teaser, $links);
    $key++;
  }
  $variables['limit'] = $key;

  $list_style = variable_get('faq_question_listing', 'ul');
  $variables['list_style'] = $list_style;
  $variables['use_teaser'] = $teaser;
  $variables['questions'] = $questions;
  $variables['answers'] = $answers;
  $variables['questions_list'] = theme('item_list', $questions, NULL, $list_style, array("class" => "faq_ul_questions_top"));
}

/**
 * Create the layout of the FAQ page if set to show the questions on top, all
 * sorted by categories.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_category_questions_top(&$variables) {
  $data = $variables['data'];
  $category_display = $variables['category_display'];
  $term = $variables['term'];
  $class = $variables['class'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
  $show_term_page_children = variable_get('faq_show_term_page_children', FALSE);
  $group_questions_top = variable_get('faq_group_questions_top', FALSE);
  $default_sorting = variable_get('faq_default_sorting', 'DESC');

  // Initialise some variables.
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }
  $this_page = 'faq';
  $get_child_terms = 0;
  if (arg(0) == 'faq' && is_numeric(arg(1))) {
    $this_page .= "/". arg(1);
    $get_child_terms = arg(1);
  }

  // Configure "back to top" link.
  $back_to_top = faq_init_back_to_top($this_page);

  // Get number of questions, and account for hidden sub-categories.
  $count = 0;
  if ($display_faq_count && $hide_child_terms) {
    $count = taxonomy_term_count_nodes($term->tid, 'faq');
  }
  $variables['display_faq_count'] = $display_faq_count;

  // Get taxonomy image.
  $variables['term_image'] = '';
  if (module_exists('taxonomy_image')) {
    $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
  }

  // Configure header.
  $variables['category_depth'] = $term->depth;
  $variables['category_name'] = check_plain($term->name);
  if ($category_display == 'hide_qa') {
    $variables['header_title'] = l($term->name, "faq/$term->tid");
  }
  else {
    $variables['header_title'] = check_plain($term->name);
  }

  // Configure category description.
  $variables['description'] = $term->description;

  // Get list of sub-categories if necessary.
  $child_categories = array();
  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
    $child_categories = faq_view_child_category_headers($term);
  }
  $variables['subcat_list'] = $child_categories;
  $variables['subcat_list_style'] = variable_get('faq_category_listing', 'ul');

  // Configure class (faq_qa or faq_qa_hide).
  if ($get_child_terms == $term->tid) {
    $variables['container_class'] = 'faq_qa';
  }
  else {
    $variables['container_class'] = $class;
  }

  // Configure subcategory bodies (theme recursively).
  $variables['subcat_body_list'] = array();
  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq') || $hide_child_terms) && $category_display == 'hide_qa')) {
    $variables['subcat_body_list'] = faq_get_child_categories_faqs($term, 'faq_category_questions_top', $default_weight, $default_sorting, $category_display, $variables['class']);
  }

  if (!count($data)) {
    $variables['question_count'] = 0;
    return;
  }

  $questions = array();
  $nodes = array();
  foreach ($data as $node) {
    if (!$hide_child_terms) {
      $count++;
    }
    $anchor = $term->tid ."n". $node->nid;
    $node_var = array();
    faq_view_question($node_var, $node, '', $anchor);
    faq_view_answer($node_var, $node, $back_to_top, $teaser, $links);
    $nodes[] = $node_var;
    $questions[] = l($node->question, $this_page, array('fragment' => $anchor));
  }
  $variables['question_count'] = $count;
  $variables['use_teaser'] = $teaser;
  $variables['question_list'] = $questions;
  $variables['question_list_style'] = variable_get('faq_question_listing', 'ul');

  if ($group_questions_top || $category_display == "hide_qa") {
    $variables['nodes'] = $nodes;
    $variables['answer_category_name'] = variable_get('faq_answer_category_name', FALSE);
  }
  else {
    $variables['nodes'] = array();
    $variables['answer_category_name'] = FALSE;
  }
}

/**
 * Create the layout of the answers for the FAQ page if set to show the
 * questions on top, all sorted by categories.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_category_questions_top_answers(&$variables) {
  $data = $variables['data'];
  $category_display = $variables['category_display'];
  $term = $variables['term'];
  $class = $variables['class'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
  $show_term_page_children = variable_get('faq_show_term_page_children', FALSE);
  $group_questions_top = variable_get('faq_group_questions_top', FALSE);
  $default_sorting = variable_get('faq_default_sorting', 'DESC');

  // Initialise some variables.
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }

  if ($group_questions_top || $category_display == "hide_qa") {
    $variables['display_answers'] = FALSE;
    $variables['category_depth'] = 0;
    return;
  }
  $variables['display_answers'] = TRUE;

  $this_page = 'faq';
  $get_child_terms = 0;
  if (arg(0) == 'faq' && is_numeric(arg(1))) {
    $this_page .= "/". arg(1);
    $get_child_terms = arg(1);
  }

  // Configure "back to top" link.
  $back_to_top = faq_init_back_to_top($this_page);

   // Get taxonomy image.
  $variables['term_image'] = '';
  if (module_exists('taxonomy_image')) {
    $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
  }

  // Configure subcategory bodies (theme recursively).
  $variables['subcat_body_list'] = array();
  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq') || $hide_child_terms) && $category_display == 'hide_qa')) {
    $variables['subcat_body_list'] = faq_get_child_categories_faqs($term, 'faq_category_questions_top_answers', $default_weight, $default_sorting, $category_display, $variables['class']);
  }


  $nodes = array();
  foreach ($data as $node) {
    $anchor = $term->tid ."n". $node->nid;
    $node_var = array();
    faq_view_question($node_var, $node, '', $anchor);
    faq_view_answer($node_var, $node, $back_to_top, $teaser, $links);
    $nodes[] = $node_var;
  }
  $variables['use_teaser'] = $teaser;
  $variables['nodes'] = $nodes;
  $variables['category_name'] = check_plain($term->name);
  $variables['category_depth'] = $term->depth;
  $variables['display_header'] = FALSE;
  $variables['answer_category_name'] = variable_get('faq_answer_category_name', FALSE);
  if ($variables['answer_category_name'] && taxonomy_term_count_nodes($term->tid, 'faq')) {
    $variables['display_header'] = TRUE;
  }
}

/**
 * Create the structure of the FAQ page if  set to show/hide the answers when
 * the question is clicked.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_hide_answer(&$variables) {
  drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');

  $data = $variables['data'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);

  $nodes = array();
  $count = 0;
  foreach ($data as $node) {
    faq_view_question($nodes[$count], $node, 'faq');
    faq_view_answer($nodes[$count], $node, array(), $teaser, $links);
    $count++;
  }
  $variables['use_teaser'] = $teaser;
  $variables['nodes'] = $nodes;
}

/**
 * Create the code of the FAQ page if set to show/hide the category-sorted
 * answers when the question is clicked.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_category_hide_answer(&$variables) {
  drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');

  $data = $variables['data'];
  $category_display = $variables['category_display'];
  $term = $variables['term'];
  $class = $variables['class'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
  $show_term_page_children = variable_get('faq_show_term_page_children', FALSE);
  $default_sorting = variable_get('faq_default_sorting', 'DESC');

  // Initialise some variables.
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }
  $get_child_terms = 0;
  if (arg(0) == 'faq' && is_numeric(arg(1))) {
    $get_child_terms = arg(1);
  }


  // Get number of questions, and account for hidden sub-categories.
  $count = 0;
  if ($display_faq_count && $hide_child_terms) {
    $count = taxonomy_term_count_nodes($term->tid, 'faq');
  }
  $variables['display_faq_count'] = $display_faq_count;

   // Get taxonomy image.
  $variables['term_image'] = '';
  if (module_exists('taxonomy_image')) {
    $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
  }

  // Configure header.
  $variables['category_depth'] = $term->depth;
  $variables['category_name'] = check_plain($term->name);
  if ($category_display == 'hide_qa') {
    $variables['header_title'] = l($term->name, "faq/$term->tid");
  }
  else {
    $variables['header_title'] = check_plain($term->name);
  }

  // Configure category description.
  $variables['description'] = $term->description;

  // Get list of sub-categories if necessary.
  $child_categories = array();
  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
    $child_categories = faq_view_child_category_headers($term);
  }
  $variables['subcat_list'] = $child_categories;
  $variables['subcat_list_style'] = variable_get('faq_category_listing', 'ul');

  // Configure class (faq_qa or faq_qa_hide).
  if ($get_child_terms == $term->tid) {
    $variables['container_class'] = 'faq_qa';
  }
  else {
    $variables['container_class'] = $class;
  }

  // Configure subcategory bodies (theme recursively).
  $variables['subcat_body_list'] = array();
  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq') || $hide_child_terms) && $category_display == 'hide_qa')) {
    $variables['subcat_body_list'] = faq_get_child_categories_faqs($term, 'faq_category_hide_answer', $default_weight, $default_sorting, $category_display, $variables['class']);
  }

  if (!count($data)) {
    $variables['question_count'] = 0;
    return;
  }

  $nodes = array();
  foreach ($data as $node) {
    if (!$hide_child_terms) {
      $count++;
    }
    $node_var = array();
    faq_view_question($node_var, $node, 'faq/'. arg(1));
    faq_view_answer($node_var, $node, array(), $teaser, $links);
    $nodes[] = $node_var;
  }
  $variables['nodes'] = $nodes;
  $variables['question_count'] = $count;
  $variables['use_teaser'] = $teaser;
}

/**
 * Create the code of the FAQ page if set to show the questions inline.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_questions_inline(&$variables) {
  $data = $variables['data'];

  // Fetch configuration.
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);

  // Configure "back to top" link.
  $back_to_top = faq_init_back_to_top('faq');

  // Configure labels.
  $variables['question_label'] = '';
  $variables['answer_label'] = '';
  if (variable_get('faq_qa_mark', FALSE)) {
    $variables['question_label'] = t(variable_get('faq_question_label', "Q:"));
    $variables['answer_label'] = t(variable_get('faq_answer_label', "A:"));
  }

  $nodes = array();
  $count = 0;
  foreach ($data as $node) {
    faq_view_question($nodes[$count], $node);
    faq_view_answer($nodes[$count], $node, $back_to_top, $teaser, $links);
    $count++;
  }
  $variables['use_teaser'] = $teaser;
  $variables['nodes'] = $nodes;
}

/**
 * Create the code of the FAQ page if set to show/hide the category-sorted
 * questions inline.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_category_questions_inline(&$variables) {
  $data = $variables['data'];
  $category_display = $variables['category_display'];
  $term = $variables['term'];
  $class = $variables['class'];

  // Fetch configuration.
  $teaser = variable_get('faq_use_teaser', FALSE);
  $links = variable_get('faq_show_node_links', FALSE);
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
  $show_term_page_children = variable_get('faq_show_term_page_children', FALSE);
  $default_sorting = variable_get('faq_default_sorting', 'DESC');

  // Initialise some variables.
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }
  $this_page = 'faq';
  $get_child_terms = 0;
  if (arg(0) == 'faq' && is_numeric(arg(1))) {
    $this_page .= "/". arg(1);
    $get_child_terms = arg(1);
  }

  // Configure "back to top" link.
  $back_to_top = faq_init_back_to_top($this_page);

  // Configure labels.
  $variables['question_label'] = '';
  $variables['answer_label'] = '';
  if (variable_get('faq_qa_mark', FALSE)) {
    $variables['question_label'] = t(variable_get('faq_question_label', "Q:"));
    $variables['answer_label'] = t(variable_get('faq_answer_label', "A:"));
  }

  // Get number of questions, and account for hidden sub-categories.
  $count = 0;
  if ($display_faq_count && $hide_child_terms) {
    $count = taxonomy_term_count_nodes($term->tid, 'faq');
  }
  $variables['display_faq_count'] = $display_faq_count;

  // Get taxonomy image.
  $variables['term_image'] = '';
  if (module_exists('taxonomy_image')) {
    $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
  }

  // Configure header.
  $variables['category_depth'] = $term->depth;
  if ($category_display == 'hide_qa') {
    $variables['header_title'] = l($term->name, "faq/$term->tid");
  }
  else {
    $variables['header_title'] = check_plain($term->name);
  }

  // Configure category description.
  $variables['description'] = $term->description;

  // Get list of sub-categories if necessary.
  $child_categories = array();
  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
    $child_categories = faq_view_child_category_headers($term);
  }
  $variables['subcat_list'] = $child_categories;
  $variables['subcat_list_style'] = variable_get('faq_category_listing', 'ul');

  // Configure class (faq_qa or faq_qa_hide).
  if ($get_child_terms == $term->tid) {
    $variables['container_class'] = 'faq_qa';
  }
  else {
    $variables['container_class'] = $class;
  }

  // Configure subcategory bodies (theme recursively).
  $variables['subcat_body_list'] = array();
  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq') || $hide_child_terms) && $category_display == 'hide_qa')) {
    $variables['subcat_body_list'] = faq_get_child_categories_faqs($term, 'faq_category_questions_inline', $default_weight, $default_sorting, $category_display, $variables['class']);
  }

  if (!count($data)) {
    $variables['question_count'] = 0;
    return;
  }

  $nodes = array();
  foreach ($data as $node) {
    if (!$hide_child_terms) {
      $count++;
    }
    $node_var = array();
    faq_view_question($node_var, $node);
    faq_view_answer($node_var, $node, $back_to_top, $teaser, $links);
    $nodes[] = $node_var;
  }
  $variables['nodes'] = $nodes;
  $variables['question_count'] = $count;
  $variables['use_teaser'] = $teaser;
}

/**
 * Create the code of the FAQ page if set to show the answer in a new page.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_new_page(&$variables) {
  $items = array();
  $data = $variables['data'];

  foreach ($data as $node) {
    $items[] = l($node->question, "node/$node->nid");
  }

  $list_style = variable_get('faq_question_listing', 'ul');
  $variables['list_style'] = $list_style;
  $variables['list_items'] = $items;

  $variables['list'] = theme('item_list', $items, NULL, $list_style, array("class" => "faq_question_listing"));
}

/**
 * Create the code of the FAQ page if set to show the answer in a new page
 * when the category-sorted question is clicked.
 *
 * @param &$variables
 *   Array reference of arguments given to the theme() function.
 */
function template_preprocess_faq_category_new_page(&$variables) {
  $data = $variables['data'];
  $category_display = $variables['category_display'];
  $term = $variables['term'];
  $class = $variables['class'];

  // Fetch configuration.
  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
  $show_term_page_children = variable_get('faq_show_term_page_children', FALSE);

  // Initialise some variables.
  $get_child_terms = 0;
  if (arg(0) == 'faq' && is_numeric(arg(1))) {
    $get_child_terms = arg(1);
  }
  $default_sorting = variable_get('faq_default_sorting', 'DESC');
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }

  // Get number of questions, and account for hidden sub-categories.
  $count = 0;
  if ($display_faq_count && $hide_child_terms) {
    $count = taxonomy_term_count_nodes($term->tid, 'faq');
  }
  $variables['display_faq_count'] = $display_faq_count;

  // Get taxonomy image.
  $variables['term_image'] = '';
  if (module_exists('taxonomy_image')) {
    $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
  }

  // Configure header.
  $variables['category_depth'] = $term->depth;
  if ($category_display == 'hide_qa') {
    $variables['header_title'] = l($term->name, "faq/$term->tid");
  }
  else {
    $variables['header_title'] = check_plain($term->name);
  }

  // Configure category description.
  $variables['description'] = $term->description;

  // Get list of sub-categories if necessary.
  $child_categories = array();
  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
    $child_categories = faq_view_child_category_headers($term);
  }
  $variables['subcat_list'] = $child_categories;
  $variables['subcat_list_style'] = variable_get('faq_category_listing', 'ul');

  // Configure class (faq_qa or faq_qa_hide).
  if ($get_child_terms == $term->tid) {
    $variables['container_class'] = 'faq_qa';
  }
  else {
    $variables['container_class'] = $class;
  }

  // Configure subcategory bodies (theme recursively).
  $variables['subcat_body_list'] = array();
  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq') || $hide_child_terms) && $category_display == 'hide_qa')) {
    $variables['subcat_body_list'] = faq_get_child_categories_faqs($term, 'faq_category_new_page', $default_weight, $default_sorting, $category_display, $variables['class']);
  }

  if (!count($data)) {
    $variables['question_count'] = 0;
    return;
  }

  $nodes = array();
  foreach ($data as $node) {
    if (!$hide_child_terms) {
      $count++;
    }
    $nodes[] = l($node->question, "node/$node->nid");
  }
  $variables['question_list'] = $nodes;
  $variables['question_list_style'] = variable_get('faq_question_listing', 'ul');
  $variables['question_count'] = $count;
}

/**
 * Implementation of hook_block().
 *
 * Create the code of the FAQ page providing three block types: FAQ Categories,
 * Recent FAQs and Random FAQs.
 */
function faq_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('FAQ Categories');
      $blocks[1]['info'] = t('Recent FAQs');
      $blocks[2]['info'] = t('Random FAQs');
      return $blocks;

    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          // FAQ Categories.
          if (module_exists("taxonomy")) {
            $terms = array();
            $vocabularies = taxonomy_get_vocabularies('faq');
            $vocab_omit = variable_get('faq_omit_vocabulary', array());
            $vocabularies = array_diff_key($vocabularies, $vocab_omit);
            foreach ($vocabularies as $vocab) {
              foreach (taxonomy_get_tree($vocab->vid) as $term) {
                if (taxonomy_term_count_nodes($term->tid, 'faq')) {
                  $terms[$term->name] = $term->tid;
                }
              }
            }
            if (count($terms) > 0) {
              $block['subject'] = t('FAQ Categories');
              $items = array();
              foreach ($terms as $name => $tid) {
                $items[] = l($name, 'faq/'. $tid);
              }
              $list_style = variable_get('faq_category_listing', 'ul');
              $block['content'] = theme('item_list', $items, NULL, $list_style);
            }
          }
          break;


        case 1:
          // Recent FAQs.
          $block['subject'] = t('Recent FAQs');
          $block['content'] = theme('faq_highlights', variable_get('faq_block_recent_faq_count', 5));
          break;

        case 2:
          // Random FAQs.
          $block['subject'] = t('Random FAQs');
          $block['content'] = theme('faq_random_highlights', variable_get('faq_block_random_faq_count', 5));
          break;

      } // End switch($delta).

      return $block;


    case 'configure':
      switch ($delta) {
        case 0:
          return;

        case 1:
          // Recent FAQs.
          $form['faq_block_recent_faq_count'] = array(
            '#type' => 'textfield',
            '#title' => t('Number of FAQs to show'),
            '#description' => t("This controls the number of FAQs that appear in the 'Recent FAQs' block"),
            '#default_value' => variable_get('faq_block_recent_faq_count', 5),
          );
          break;

        case 2:
          // Random FAQs.
          $form['faq_block_random_faq_count'] = array(
            '#type' => 'textfield',
            '#title' => t('Number of FAQs to show'),
            '#description' => t("This controls the number of FAQs that appear in the 'Random FAQs' block"),
            '#default_value' => variable_get('faq_block_random_faq_count', 5),
          );
          break;
      } // End switch($delta).

      return $form;

    case 'save':
      switch ($delta) {
        case 0:
          break;

        case 1:
          variable_set('faq_block_recent_faq_count', $edit['faq_block_recent_faq_count']);
          break;

        case 2:
          variable_set('faq_block_random_faq_count', $edit['faq_block_random_faq_count']);
          break;
      } // End switch($delta).
      return;

  } // End switch($op).

}

/**
 * Create the html output for the Recent FAQs block.
 *
 * @param $num
 *  The default value is 5; determines the number of FAQ entries to be shown.
 * @return
 *  The html-formatted code displaying the Recent FAQs.
 */
function theme_faq_highlights($num = 5) {

  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type='faq' AND n.status = 1 ORDER BY n.created DESC", "n", "nid"), 0, $num);

  $items = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load(array('nid' => $row->nid));
    $node = node_prepare($node);
    if (node_access("view", $node)) {
      $items[] = l($node->question, 'node/'. $node->nid);
    }
  }
  $list_style = variable_get('faq_question_listing', 'ul');
  $output = theme('item_list', $items, NULL, $list_style);
  $output .= l(t('All FAQs'), 'faq');

  return $output;
}

/**
 * Create the html output for the Random FAQs block.
 *
 * @param $num
 *  The default value is 5; determines the number of FAQ entries to be shown.
 * @return
 *  The html-formatted code displaying the Random FAQs.
 */
function theme_faq_random_highlights($num = 5) {

  $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.type='faq' AND n.status = 1 ORDER BY RAND()", "n", "nid"), 0, $num);

  $items = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load(array('nid' => $row->nid));
    $node = node_prepare($node);
    if (node_access("view", $node)) {
      $items[] = l($node->question, 'node/'. $node->nid);
    }
  }
  $list_style = variable_get('faq_question_listing', 'ul');
  $output = theme('item_list', $items, NULL, $list_style);
  $output .= l(t('All FAQs'), 'faq');

  return $output;
}

/**
 * Return a html formatted list of terms indented according to the term depth.
 *
 * @param $vid
 *   Vocabulary id.
 * @param $tid
 *   Term id.
 * @return
 *   Return a html formatted list of terms indented according to the term depth.
 */
function _get_indented_faq_terms($vid, $tid) {

  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);

  $items = array();
  $tree = taxonomy_get_tree($vid, $tid, -1, 1);

  foreach ($tree as $term) {

    $tree_count = taxonomy_term_count_nodes($term->tid, 'faq');

    if ($tree_count) {
      // Get taxonomy image.
      $term_image = '';
      if (module_exists('taxonomy_image')) {
        $term_image = taxonomy_image_display($term->tid, array('class' => 'faq_tax_image'));
      }

      // Get term description.
      $desc = '';
      if (!empty($term->description)) {
        $desc = '<div class="faq_qa_description"><p>';
        $desc .= $term->description ."</p></div>";
      }

      // See if this term has any nodes itself, should it be a link?
      $result = db_query(db_rewrite_sql("SELECT COUNT(n.nid) AS c FROM {term_node} tn INNER JOIN {node} n ON (n.nid = tn.nid AND n.vid = tn.vid) WHERE n.status = 1 AND n.type = 'faq' AND tn.tid = '%d' ", "n", "nid"), $term->tid);
      $term_node_count = db_fetch_object($result);

      if ($term_node_count->c > 0) {
        if ($display_faq_count) {
          $count = $term_node_count->c;
          if ($hide_child_terms) {
            $count = $tree_count;
          }
          $cur_item = $term_image . l($term->name, "faq/$term->tid") ." ($count) ". $desc;
        }
        else {
          $cur_item = $term_image . l($term->name, "faq/$term->tid") . $desc;
        }
      }
      else {
        $cur_item = $term_image . check_plain($term->name) . $desc;
      }
      $cur_item .= '<div class="clear-block"></div>';

      $term_items = array();
      if (!$hide_child_terms) {
        $term_items = _get_indented_faq_terms($vid, $term->tid);
      }
      $items[] = array("data" => $cur_item, "children" => $term_items);

    }
  }

  return $items;
}

/**
 * Gets a list of terms associated with the FAQ nodes.
 *
 * @return
 *   Return the html-formatted content.
 */
function faq_get_terms() {
  $items = array();
  $vocabularies = taxonomy_get_vocabularies('faq');
  $vocab_omit = variable_get('faq_omit_vocabulary', array());
  $vocabularies = array_diff_key($vocabularies, $vocab_omit);
  foreach ($vocabularies as $vid => $vobj) {
    $vocab_items = _get_indented_faq_terms($vid, 0);
    $items = array_merge($items, $vocab_items);
  }
  return theme('item_list', $items);
}

/**
 * Formats the output for the faq_site_map() function.
 *
 * @return
 *  Return a list of FAQ categories if categorization is enabled, otherwise
 *  return a list of faq nodes.
 */
function faq_get_faq_list() {
  // Return list of vocab terms if categories are configured.
  $use_categories = variable_get('faq_use_categories', FALSE);
  if ($use_categories) {
    return faq_get_terms();
  }

  // Otherwise return list of weighted FAQ nodes.
  $default_sorting = variable_get('faq_default_sorting', 'DESC');
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
  }

  $items = array();
  $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $default_sorting);
  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    if (node_access("view", $node)) {
      $items[] = l($node->question, "node/$node->nid");
    }
  }

  return theme('item_list', $items);
}

/**
 * Implementation of hook_site_map().
 *
 * Not needed by the latest site_map module as it implements a _site_map_faq()
 * function itself.
 *
 * Create a sitemap, by showing all the FAQ entries list - categorized or not -
 * using faq_get_faq_list() function.
 * @return
 *   Return a list of FAQ categories if categorization is enabled, otherwise
 *   return a list of faq nodes.
 */
/*
function faq_site_map() {
  $title = variable_get('faq_title', t('Frequently Asked Questions'));
  $output = faq_get_faq_list();
  return theme('box', $title, $output);
}
 */

/**
 * Implementation of hook_link_alter().
 *
 * Changes the term links on a node to point at the appropriate faq page.
 */
function faq_link_alter(&$links, $node) {
  if (!variable_get('faq_use_categories', FALSE) || !module_exists("taxonomy")) {
    return;
  }
  $vocabularies = taxonomy_get_vocabularies('faq');
  $vocab_omit = variable_get('faq_omit_vocabulary', array());
  $vocabularies = array_diff_key($vocabularies, $vocab_omit);
  foreach ($links as $module => $link) {
    if (strpos($module, 'taxonomy_term') !== FALSE) {
      // Link back to the faq and not the taxonomy term page. We'll only
      // do this if the taxonomy term in question belongs to faq vocab.
      $tid = str_replace('taxonomy/term/', '', $link['href']);
      $term = taxonomy_get_term($tid);
      if (!is_object($term)) return;
      foreach ($vocabularies as $vid => $vobj) {
        if ($term->vid == $vid && taxonomy_term_count_nodes($term->tid, 'faq')) {
          $links[$module]['href'] = str_replace('taxonomy/term', 'faq', $link['href']);
          break;
        }
      }
    }
  }
}

if (!function_exists('array_diff_key')) {
  function array_diff_key() {
    $arrs = func_get_args();
    $result = array_shift($arrs);
    foreach ($arrs as $array) {
      foreach ($result as $key => $v) {
        if (array_key_exists($key, $array)) {
          unset($result[$key]);
        }
      }
    }
    return $result;
  }
}

/**
 *  Implementation of hook_term_path().
 */
function faq_term_path($term) {
  return 'faq/'. $term->tid;
}

/**
 * Helper function to setup the faq question.
 *
 * @param &$data
 *   Array reference to store display data in.
 * @param $node
 *   The node object.
 * @param $path
 *   The path/url which the question should link to if links are disabled.
 * @param $anchor
 *   Link anchor to use in question links; for "questions top" layout.
 */
function faq_view_question(&$data, $node, $path = NULL, $anchor = NULL) {
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $question = '';

  // Don't link to faq node, instead provide no link, or link to current page.
  if ($disable_node_links) {
    if (empty($path) && empty($anchor)) {
      $question = $node->question;
    }
    else if (empty($path)) {
      $question = l("", "", array("attributes" => array("name" => "$anchor"))) . $node->question;
    }
    else {
      $question = l($node->question, $path);
    }
  }

  // Link to faq node.
  else {
    if (empty($anchor)) {
      $question = l($node->question, "node/$node->nid");
    }
    else {
      $question = l($node->question, "node/$node->nid", array("attributes" => array("name" => "$anchor")));
    }
  }
  $data['question'] = $question;
}

/**
 * Helper function to setup the faq answer.
 *
 * @param &$data
 *   Array reference to store display data in.
 * @param $node
 *   The node object.
 * @param $back_to_top
 *   An array containing the "back to top" link.
 * @param $teaser
 *   Whether or not to use teasers.
 * @param $links
*   Whether or not to show node links.
 */
function faq_view_answer(&$data, $node, $back_to_top, $teaser, $links) {

  // Build the faq node content and invoke other modules' links, etc, functions.
  $node = (object)$node;
  $node = node_build_content($node, $teaser, 0);
  if ($links) {
    $node->links = module_invoke_all('link', 'node', $node, $teaser);
    foreach (module_implements('link_alter') as $module) {
      $function = $module .'_link_alter';
      $function($node, $node->links);
    }
  }
  $node->links['faq_back_to_top'] = $back_to_top;

  $content = drupal_render($node->content);
  node_invoke_nodeapi($node, 'alter', $teaser, 0);

  // Unset unused $node text so that a bad theme can not open a security hole.
  $node->body = NULL;
  $node->teaser = NULL;

  $data['body'] = $content;
  if ($links) {
    $data['links'] = theme('links', $node->links);
  }
}

/**
 * Helper function to setup the "back to top" link.
 *
 * @param $path
 *   The path/url where the "back to top" link should bring the user too.  This
 *   could be the 'faq' page or one of the categorized faq pages, e.g 'faq/123'
 *   where 123 is the tid.
 * @return
 *   An array containing the "back to top" link.
 */
function faq_init_back_to_top($path) {
  $back_to_top = array();
  $back_to_top_text = variable_get('faq_back_to_top', 'Back to Top');
  if (!empty($back_to_top_text)) {
    $back_to_top = array(
      'title' => t($back_to_top_text),
      'href' => $path,
      'attributes' => array('title' => t('Go back to the top of the page.')),
      'fragment' => ' ',
      'html' => TRUE,
    );
  }

  return $back_to_top;
}

/**
 * Helper function for retrieving the sub-categories faqs.
 *
 * @param $term
 *   Contain the category / term information.
 * @param $theme_function
 *   Theme function to use to format the Q/A layout for sub-categories.
 * @param $default_weight
 *   Is 0 for $default_sorting = DESC; is 1000000 for $default_sorting = ASC.
 * @param $default_sorting
 *   If 'DESC', nodes are sorted by creation date descending; if 'ASC', nodes
 *   are sorted by creation date ascending.
 * @param $category_display
 *   Contain which category layout should be used.
 * @param $class
 *   CSS class which the html div will be using. A special class name is
 *   required in order to hide and questions / answers.
 */
function faq_get_child_categories_faqs($term, $theme_function, $default_weight, $default_sorting, $category_display, $class) {
  $output = array();

  $list = taxonomy_get_children($term->tid);

  foreach ($list as $tid => $child_term) {
    $child_term->depth = $term->depth + 1;

    if (taxonomy_term_count_nodes($child_term->tid, 'faq')) {
      $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created %s", "n", "nid"), $default_weight, $child_term->tid, $default_sorting);

      $data = array();
      while ($row = db_fetch_object($result)) {
        $node = node_load($row->nid);
        if (node_access("view", $node)) {
          $data[] = $node;
        }
      }
      $output[] = theme($theme_function, $data, 1, $category_display, $child_term, $class);
    }
  }

  return $output;
}

/**
 * Helper function to setup the list of sub-categories for the header.
 *
 * @param $term
 *   Contain the category / term information.
 * @return
 *   An array of sub-categories.
 */
function faq_view_child_category_headers($term) {

  $child_categories = array();
  $list = taxonomy_get_children($term->tid);

  foreach ($list as $tid => $child_term) {
    $term_node_count = taxonomy_term_count_nodes($child_term->tid, 'faq');
    if ($term_node_count) {

      // Get taxonomy image.
      $term_image = '';
      if (module_exists('taxonomy_image')) {
        $term_image = taxonomy_image_display($child_term->tid, array('class' => 'faq_tax_image'));
      }

      $term_vars['link'] = l($child_term->name, "faq/$child_term->tid");
      $term_vars['description'] = $child_term->description;
      $term_vars['count'] = $term_node_count;
      $term_vars['term_image'] = $term_image;
      $child_categories[] = $term_vars;
    }
  }

  return $child_categories;
}
